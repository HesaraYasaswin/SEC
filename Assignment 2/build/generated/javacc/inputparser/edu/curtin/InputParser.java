/* Generated By:JavaCC: Do not edit this line. InputParser.java */
package edu.curtin;

import edu.curtin.game.Game;
import edu.curtin.game.Item;
import edu.curtin.game.Obstacle;
import edu.curtin.scripts.ScriptManager;
import edu.curtin.gameplugins.PluginManager;

import java.io.*;
import java.util.*;


public class InputParser implements InputParserConstants {

    private Game game;
    private String filePath;
    private PluginManager pluginManager;

    public InputParser(String filePath, Game game) {
        this.filePath = filePath;
        this.game = game;
        this.pluginManager = PluginManager.getInstance();
    }

    public boolean parseInput() {
        try {
            InputStream stream = new FileInputStream(filePath);
            InputParser parser = new InputParser(stream);
            InputParser.Input(game, ScriptManager.getInstance());
            return true; // if parsing is successful
        } catch (IOException e) {
            System.err.println("Error reading input file: " + e.getMessage());
            return false; // if there's an error
        } catch (ParseException e) {
            System.err.println("Error parsing input: " + e.getMessage());
            return false; // if there's a parse error
        }
    }

  static final public void Input(Game game, ScriptManager scriptManager) throws ParseException {
    SizeDeclaration(game);
    StartDeclaration(game);
    GoalDeclaration(game);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case SCRIPT:
      case PLUGIN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
        ItemDeclaration(game);
        break;
      case OBSTACLE:
        ObstacleDeclaration(game);
        break;
      case PLUGIN:
        PluginDeclaration();
        break;
      case SCRIPT:
        ScriptDeclaration(scriptManager);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void SizeDeclaration(Game game) throws ParseException {
                                    Token row, col;
    jj_consume_token(SIZE);
    jj_consume_token(LPAR);
    row = jj_consume_token(INTEGER);
    jj_consume_token(COMMA);
    col = jj_consume_token(INTEGER);
    jj_consume_token(RPAR);
      game.initializeGrid(Integer.parseInt(row.image), Integer.parseInt(col.image));
  }

  static final public void StartDeclaration(Game game) throws ParseException {
                                     Token row, col;
    jj_consume_token(START);
    jj_consume_token(LPAR);
    row = jj_consume_token(INTEGER);
    jj_consume_token(COMMA);
    col = jj_consume_token(INTEGER);
    jj_consume_token(RPAR);
      game.initializePlayer(Integer.parseInt(row.image), Integer.parseInt(col.image));
  }

  static final public void GoalDeclaration(Game game) throws ParseException {
                                    Token row, col;
    jj_consume_token(GOAL);
    jj_consume_token(LPAR);
    row = jj_consume_token(INTEGER);
    jj_consume_token(COMMA);
    col = jj_consume_token(INTEGER);
    jj_consume_token(RPAR);
      game.initializeGoal(Integer.parseInt(row.image), Integer.parseInt(col.image));
  }

  static final public void ItemDeclaration(Game game) throws ParseException {
    Token itemName;
    jj_consume_token(ITEM);
    itemName = jj_consume_token(STRING);
    jj_consume_token(LBRACE);
    ItemDetails(game, itemName.image);
    jj_consume_token(RBRACE);
  }

  static final public void ItemDetails(Game game, String itemName) throws ParseException {
    Token msg;
    jj_consume_token(AT);
    PositionList(game, itemName);
    jj_consume_token(MESSAGE);
    msg = jj_consume_token(STRING);
        Item item = game.getItemByName(itemName);
        if (item != null) {
            item.setMessage(msg.image);
        }
  }

  static final public void PluginDeclaration() throws ParseException {
    Token pluginClassName;
    jj_consume_token(PLUGIN);
    pluginClassName = jj_consume_token(CLASS_NAME);
        try {
            // Dynamically load the plugin class using reflection
            Class<?> plugin = Class.forName(pluginClassName.image); // Use the token's image directly

            // Register the plugin in the PluginManager
            PluginManager.getInstance().registerPlugin(plugin);


        } catch (ClassNotFoundException e) {
            System.err.println("Error loading plugin: " + e.getMessage());
        }
  }

  static final public void ObstacleDeclaration(Game game) throws ParseException {
    jj_consume_token(OBSTACLE);
    jj_consume_token(LBRACE);
    ObstacleDetails(game);
    jj_consume_token(RBRACE);
  }

  static final public void ObstacleDetails(Game game) throws ParseException {
    Obstacle obstacle = new Obstacle();
    jj_consume_token(AT);
    PositionListForObstacle(game, obstacle);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRES:
      jj_consume_token(REQUIRES);
      ItemRequirementList(obstacle);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void PositionList(Game game, String itemName) throws ParseException {
    Position(game, itemName);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      Position(game, itemName);
    }
  }

  static final public void PositionListForObstacle(Game game, Obstacle obstacle) throws ParseException {
    PositionForObstacle(game, obstacle);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      PositionForObstacle(game, obstacle);
    }
  }

  static final public void Position(Game game, String itemName) throws ParseException {
    Token row, col;
    jj_consume_token(LPAR);
    row = jj_consume_token(INTEGER);
    jj_consume_token(COMMA);
    col = jj_consume_token(INTEGER);
    jj_consume_token(RPAR);
                                                        game.addItem(new Item(itemName), Integer.parseInt(row.image), Integer.parseInt(col.image));
  }

  static final public void PositionForObstacle(Game game, Obstacle obstacle) throws ParseException {
    Token row, col;
    jj_consume_token(LPAR);
    row = jj_consume_token(INTEGER);
    jj_consume_token(COMMA);
    col = jj_consume_token(INTEGER);
    jj_consume_token(RPAR);
                                                        game.setObstacle(obstacle, Integer.parseInt(row.image), Integer.parseInt(col.image));
  }

  static final public void ItemRequirementList(Obstacle obstacle) throws ParseException {
    Token requiredItem;
    requiredItem = jj_consume_token(STRING);
                            obstacle.addRequiredItem(requiredItem.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      requiredItem = jj_consume_token(STRING);
                                     obstacle.addRequiredItem(requiredItem.image);
    }
  }

  static final public void ScriptDeclaration(ScriptManager scriptManager) throws ParseException {
    jj_consume_token(SCRIPT);
    jj_consume_token(S_START);
        StringBuilder scriptContent = new StringBuilder(); // Initialize a StringBuilder for script content

        // Loop to read script content until the closing brace
        while (true) {
            Token token = getNextToken(); // Get the next token
            if (token.kind == RBRACE) {
                break; // Exit loop if closing brace is found
            }
            scriptContent.append(token.image); // Append the token's image to scriptContent
        }


        scriptManager.addScript(scriptContent.toString()); // Pass the script content to ScriptManager

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public InputParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf00,0xf00,0x4000,0x80000,0x80000,0x80000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public InputParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public InputParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new InputParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public InputParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InputParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public InputParser(InputParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InputParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
